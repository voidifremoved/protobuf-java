// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

package com.google.protobuf.compiler.java;

import com.google.protobuf.Descriptors.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

/** A utility class for generating the main Java file for a .proto file. */
public final class FileGenerator {
  private final FileDescriptor file;
  private final String javaPackage;
  private final String classname;
  private final List<MessageGenerator> messageGenerators;
  private final List<ExtensionGenerator> extensionGenerators;
  private final Context context;
  private final ClassNameResolver nameResolver;
  private final Options options;

  public FileGenerator(FileDescriptor file, Options options) {
    this.file = file;
    this.options = options;
    this.context = new Context(file, options);
    this.nameResolver = context.getNameResolver();
    this.javaPackage = nameResolver.getFileJavaPackage(file);
    this.classname = nameResolver.getFileClassName(file, true);
    this.messageGenerators = new ArrayList<>(file.getMessageTypes().size());
    for (int i = 0; i < file.getMessageTypes().size(); i++) {
      messageGenerators.add(new MessageGenerator());
    }
    this.extensionGenerators = new ArrayList<>(file.getExtensions().size());
    for (int i = 0; i < file.getExtensions().size(); i++) {
      extensionGenerators.add(new ExtensionGenerator());
    }
  }

  public String validate() {
    // TODO: Implement this method.
    return null;
  }

  public void generate(PrintWriter out) {
    out.println("// Generated by the protocol buffer compiler.  DO NOT EDIT!");
    out.println("// NO CHECKED-IN PROTOBUF GENCODE");
    out.println("// source: " + file.getName());
    out.println();
    if (!javaPackage.isEmpty()) {
      out.println("package " + javaPackage + ";");
      out.println();
    }
    out.println("public final class " + classname + " {");
    out.println("  private " + classname + "() {}");
    out.println();
    out.println("  public static void registerAllExtensions(");
    out.println("      com.google.protobuf.ExtensionRegistryLite registry) {");
    for (ExtensionGenerator extensionGenerator : extensionGenerators) {
      extensionGenerator.generateRegistrationCode(out);
    }
    for (MessageGenerator messageGenerator : messageGenerators) {
      messageGenerator.generateExtensionRegistrationCode(out);
    }
    out.println("  }");
    out.println();
    out.println("  public static void registerAllExtensions(");
    out.println("      com.google.protobuf.ExtensionRegistry registry) {");
    out.println("    registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);");
    out.println("  }");
    out.println();
    for (MessageGenerator messageGenerator : messageGenerators) {
      messageGenerator.generateInterface(out);
      messageGenerator.generate(out);
    }
    for (ExtensionGenerator extensionGenerator : extensionGenerators) {
      extensionGenerator.generate(out);
    }
    int[] staticBlockBytecodeEstimate = new int[1];
    for (MessageGenerator messageGenerator : messageGenerators) {
      messageGenerator.generateStaticVariables(out, staticBlockBytecodeEstimate);
    }
    out.println();
    out.println("  public static com.google.protobuf.Descriptors.FileDescriptor");
    out.println("      getDescriptor() {");
    out.println("    return descriptor;");
    out.println("  }");
    out.println("  private static com.google.protobuf.Descriptors.FileDescriptor");
    out.println("      descriptor;");
    out.println("  static {");
    // TODO: Add descriptor initialization code.
    out.println("  }");
    out.println();
    out.println("  // @@protoc_insertion_point(outer_class_scope)");
    out.println("}");
  }
}
