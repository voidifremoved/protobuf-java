package com.google.protobuf.compiler;

import com.google.protobuf.Descriptors.FileDescriptor;
import java.util.List;
import java.util.function.Consumer;

class FileGenerator {
  private final FileDescriptor file;
  private final Options options;
  private final boolean immutable;
  private final Context context;
  private final NameResolver nameResolver;
  private final String className;

  FileGenerator(FileDescriptor file, Options options, boolean immutable) {
    this.file = file;
    this.options = options;
    this.immutable = immutable;
    this.context = new Context(file, options);
    this.nameResolver = context.getNameResolver();
    this.className = nameResolver.getFileClassName(file, immutable);
  }

  boolean validate(Consumer<String> error) {
    // Check that no class name matches the file's class name.  This is a common
    // problem that leads to Java compile errors that can be hard to understand.
    // It's especially bad when using the java_multiple_files, since we would
    // end up overwriting the outer class with one of the inner ones.
    if (nameResolver.hasConflictingClassName(file, className, /* exact= */ true)) {
      error.accept(
          file.getName()
              + ": Cannot generate Java output because the file's outer class name, \""
              + className
              + "\", matches the name of one of the types declared inside it.  "
              + "Please either rename the type or use the java_outer_classname "
              + "option to specify a different outer class name for the .proto file.");
      return false;
    }
    return true;
  }

  void generate(java.io.PrintWriter writer) {
    writer.println("package " + getJavaPackage() + ";");
    writer.println();
    writer.println("public final class " + getClassName() + " {");
    writer.println("  // Generated by the protocol buffer compiler.  DO NOT EDIT!");
    for (com.google.protobuf.Descriptors.EnumDescriptor enumType : file.getEnumTypes()) {
      writer.println("  public enum " + enumType.getName() + " {");
      for (com.google.protobuf.Descriptors.EnumValueDescriptor value : enumType.getValues()) {
        writer.println("    " + value.getName() + ",");
      }
      writer.println("  }");
    }
    for (com.google.protobuf.Descriptors.Descriptor messageType : file.getMessageTypes()) {
      writer.println("  public static final class " + messageType.getName() + " {");
      for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
        String fieldName = StringUtils.toLowerCamelCase(field.getName());
        String type = getJavaType(field);
        if (field.isRepeated()) {
          writer.println(
              "    private " + type + " " + fieldName + "_ = new java.util.ArrayList<>();");
        } else {
          writer.println("    private " + type + " " + fieldName + "_;");
        }
        writer.println(
            "    public " + type + " get" + StringUtils.toUpperCamelCase(fieldName) + "() {");
        writer.println("      return " + fieldName + "_;");
        writer.println("    }");
      }
      if (immutable) {
        writer.println("    public static final class Builder {");
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = StringUtils.toLowerCamelCase(field.getName());
          String type = getJavaType(field);
          if (field.isRepeated()) {
            writer.println(
                "      private " + type + " " + fieldName + "_ = new java.util.ArrayList<>();");
            writer.println(
                "      public Builder add"
                    + StringUtils.toUpperCamelCase(fieldName)
                    + "("
                    + getJavaWrapperType(field)
                    + " value) {");
            writer.println("        this." + fieldName + "_.add(value);");
            writer.println("        return this;");
            writer.println("      }");
          } else {
            writer.println("      private " + type + " " + fieldName + "_;");
            writer.println(
                "      public Builder set"
                    + StringUtils.toUpperCamelCase(fieldName)
                    + "("
                    + type
                    + " value) {");
            writer.println("        this." + fieldName + "_ = value;");
            writer.println("        return this;");
            writer.println("      }");
          }
        }
        writer.println("      public " + messageType.getName() + " build() {");
        writer.println(
            "        "
                + messageType.getName()
                + " message = new "
                + messageType.getName()
                + "();");
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = StringUtils.toLowerCamelCase(field.getName());
          if (field.isRepeated()) {
            writer.println(
                "        message."
                    + fieldName
                    + "_ = java.util.Collections.unmodifiableList(this."
                    + fieldName
                    + "_);");
          } else {
            writer.println("        message." + fieldName + "_ = this." + fieldName + "_;");
          }
        }
        writer.println("        return message;");
        writer.println("      }");
        writer.println("    }");
      } else {
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = StringUtils.toLowerCamelCase(field.getName());
          String type = getJavaType(field);
          writer.println(
              "    public void set"
                  + StringUtils.toUpperCamelCase(fieldName)
                  + "("
                  + type
                  + " value) {");
          writer.println("      this." + fieldName + "_ = value;");
          writer.println("    }");
        }
      }
      writer.println("  }");
    }
    writer.println("}");
    writer.close();
  }

  void generateSiblings(
      String packageDir,
      GeneratorContext context,
      List<String> fileList,
      List<String> annotationList) {
    // This will be implemented in a future task.
  }

  String getJavaPackage() {
    return file.getOptions().hasJavaPackage()
        ? file.getOptions().getJavaPackage()
        : file.getPackage();
  }

  String getClassName() {
    return nameResolver.getFileClassName(file, immutable);
  }

  private String getJavaType(com.google.protobuf.Descriptors.FieldDescriptor field) {
    if (field.isRepeated()) {
      return "java.util.List<" + getJavaWrapperType(field) + ">";
    }
    switch (field.getType()) {
      case DOUBLE:
        return "double";
      case FLOAT:
        return "float";
      case INT64:
        return "long";
      case UINT64:
        return "long";
      case INT32:
        return "int";
      case FIXED64:
        return "long";
      case FIXED32:
        return "int";
      case BOOL:
        return "boolean";
      case STRING:
        return "java.lang.String";
      case GROUP:
        // The group feature is deprecated and not recommended for use.
        // As such, we will not be implementing it in the Java code generator.
        return "com.google.protobuf.ByteString";
      case MESSAGE:
        return field.getMessageType().getFullName();
      case BYTES:
        return "com.google.protobuf.ByteString";
      case UINT32:
        return "int";
      case ENUM:
        return field.getEnumType().getFullName();
      case SFIXED32:
        return "int";
      case SFIXED64:
        return "long";
      case SINT32:
        return "int";
      case SINT64:
        return "long";
      default:
        return "java.lang.Object";
    }
  }

  private String getJavaWrapperType(com.google.protobuf.Descriptors.FieldDescriptor field) {
    switch (field.getType()) {
      case DOUBLE:
        return "java.lang.Double";
      case FLOAT:
        return "java.lang.Float";
      case INT64:
        return "java.lang.Long";
      case UINT64:
        return "java.lang.Long";
      case INT32:
        return "java.lang.Integer";
      case FIXED64:
        return "java.lang.Long";
      case FIXED32:
        return "java.lang.Integer";
      case BOOL:
        return "java.lang.Boolean";
      case STRING:
        return "java.lang.String";
      case GROUP:
        // The group feature is deprecated and not recommended for use.
        // As such, we will not be implementing it in the Java code generator.
        return "com.google.protobuf.ByteString";
      case MESSAGE:
        return field.getMessageType().getFullName();
      case BYTES:
        return "com.google.protobuf.ByteString";
      case UINT32:
        return "java.lang.Integer";
      case ENUM:
        return field.getEnumType().getFullName();
      case SFIXED32:
        return "java.lang.Integer";
      case SFIXED64:
        return "java.lang.Long";
      case SINT32:
        return "java.lang.Integer";
      case SINT64:
        return "java.lang.Long";
      default:
        return "java.lang.Object";
    }
  }
}
