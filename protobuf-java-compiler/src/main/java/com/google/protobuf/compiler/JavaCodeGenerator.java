package com.google.protobuf.compiler;

import com.google.protobuf.Descriptors;
import com.google.protobuf.Descriptors.FileDescriptor;
import java.io.OutputStream;
import java.util.List;

public class JavaCodeGenerator extends CodeGenerator {
  @Override
  public void generate(FileDescriptor file, String parameter, GeneratorContext generatorContext)
      throws GenerationException {
    try {
      String fileName = file.getName().substring(0, file.getName().lastIndexOf('.'));
      String className = toUpperCamelCase(fileName);
      String javaPackage = file.getOptions().hasJavaPackage() ?
          file.getOptions().getJavaPackage() : file.getPackage();
      String outputFileName = javaPackage.replace('.', '/') + "/" + className + ".java";
      OutputStream output = generatorContext.open(outputFileName);
      java.io.PrintWriter writer = new java.io.PrintWriter(output);
      writer.println("package " + javaPackage + ";");
      writer.println();
      writer.println("public final class " + className + " {");
      writer.println("  // Generated by the protocol buffer compiler.  DO NOT EDIT!");
      for (com.google.protobuf.Descriptors.EnumDescriptor enumType : file.getEnumTypes()) {
        writer.println("  public enum " + enumType.getName() + " {");
        for (com.google.protobuf.Descriptors.EnumValueDescriptor value : enumType.getValues()) {
          writer.println("    " + value.getName() + ",");
        }
        writer.println("  }");
      }
      for (com.google.protobuf.Descriptors.Descriptor messageType : file.getMessageTypes()) {
        writer.println("  public static final class " + messageType.getName() + " {");
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = toLowerCamelCase(field.getName());
          String type = getJavaType(field);
          if (field.isRepeated()) {
            writer.println("    private " + type + " " + fieldName + "_ = new java.util.ArrayList<>();");
          } else {
            writer.println("    private " + type + " " + fieldName + "_;");
          }
          writer.println("    public " + type + " get" + toUpperCamelCase(fieldName) + "() {");
          writer.println("      return " + fieldName + "_;");
          writer.println("    }");
        }
        writer.println("    public static final class Builder {");
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = toLowerCamelCase(field.getName());
          String type = getJavaType(field);
          if (field.isRepeated()) {
            writer.println("      private " + type + " " + fieldName + "_ = new java.util.ArrayList<>();");
            writer.println("      public Builder add" + toUpperCamelCase(fieldName) + "(" + getJavaWrapperType(field) + " value) {");
            writer.println("        this." + fieldName + "_.add(value);");
            writer.println("        return this;");
            writer.println("      }");
          } else {
            writer.println("      private " + type + " " + fieldName + "_;");
            writer.println("      public Builder set" + toUpperCamelCase(fieldName) + "(" + type + " value) {");
            writer.println("        this." + fieldName + "_ = value;");
            writer.println("        return this;");
            writer.println("      }");
          }
        }
        writer.println("      public " + messageType.getName() + " build() {");
        writer.println("        " + messageType.getName() + " message = new " + messageType.getName() + "();");
        for (com.google.protobuf.Descriptors.FieldDescriptor field : messageType.getFields()) {
          String fieldName = toLowerCamelCase(field.getName());
          if (field.isRepeated()) {
            writer.println("        message." + fieldName + "_ = java.util.Collections.unmodifiableList(this." + fieldName + "_);");
          } else {
            writer.println("        message." + fieldName + "_ = this." + fieldName + "_;");
          }
        }
        writer.println("        return message;");
        writer.println("      }");
        writer.println("    }");
        writer.println("  }");
      }
      writer.println("}");
      writer.close();
    } catch (java.io.IOException e) {
      throw new GenerationException(e);
    }
  }

  private String toUpperCamelCase(String filename) {
    String[] parts = filename.split("_");
    String camelCaseString = "";
    for (String part : parts) {
      camelCaseString = camelCaseString + toProperCase(part);
    }
    return camelCaseString;
  }

  private String toLowerCamelCase(String filename) {
    String camelCaseString = toUpperCamelCase(filename);
    return camelCaseString.substring(0, 1).toLowerCase() + camelCaseString.substring(1);
  }

  private String toProperCase(String s) {
    if (s == null || s.isEmpty()) {
      return "";
    }
    if (s.length() == 1) {
      return s.toUpperCase();
    }
    return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
  }

  private String getJavaType(Descriptors.FieldDescriptor field) {
    if (field.isRepeated()) {
      return "java.util.List<" + getJavaWrapperType(field) + ">";
    }
    switch (field.getType()) {
      case DOUBLE:
        return "double";
      case FLOAT:
        return "float";
      case INT64:
        return "long";
      case UINT64:
        return "long";
      case INT32:
        return "int";
      case FIXED64:
        return "long";
      case FIXED32:
        return "int";
      case BOOL:
        return "boolean";
      case STRING:
        return "java.lang.String";
      case GROUP:
        return "com.google.protobuf.ByteString"; // TODO: Implement group logic
      case MESSAGE:
        return field.getMessageType().getFullName();
      case BYTES:
        return "com.google.protobuf.ByteString";
      case UINT32:
        return "int";
      case ENUM:
        return field.getEnumType().getFullName();
      case SFIXED32:
        return "int";
      case SFIXED64:
        return "long";
      case SINT32:
        return "int";
      case SINT64:
        return "long";
      default:
        return "java.lang.Object";
    }
  }

  @Override
  public long getSupportedFeatures() {
    return Feature.FEATURE_PROTO3_OPTIONAL.getValue();
  }

  @Override
  public Edition getMinimumEdition() {
    return Edition.EDITION_PROTO2;
  }

  @Override
  public Edition getMaximumEdition() {
    return Edition.EDITION_2023;
  }

  private String getJavaWrapperType(Descriptors.FieldDescriptor field) {
    switch (field.getType()) {
      case DOUBLE:
        return "java.lang.Double";
      case FLOAT:
        return "java.lang.Float";
      case INT64:
        return "java.lang.Long";
      case UINT64:
        return "java.lang.Long";
      case INT32:
        return "java.lang.Integer";
      case FIXED64:
        return "java.lang.Long";
      case FIXED32:
        return "java.lang.Integer";
      case BOOL:
        return "java.lang.Boolean";
      case STRING:
        return "java.lang.String";
      case GROUP:
        return "com.google.protobuf.ByteString"; // TODO: Implement group logic
      case MESSAGE:
        return field.getMessageType().getFullName();
      case BYTES:
        return "com.google.protobuf.ByteString";
      case UINT32:
        return "java.lang.Integer";
      case ENUM:
        return field.getEnumType().getFullName();
      case SFIXED32:
        return "java.lang.Integer";
      case SFIXED64:
        return "java.lang.Long";
      case SINT32:
        return "java.lang.Integer";
      case SINT64:
        return "java.lang.Long";
      default:
        return "java.lang.Object";
    }
  }
}
